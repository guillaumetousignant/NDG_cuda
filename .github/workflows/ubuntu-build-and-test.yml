name: Ubuntu
on: [push]
jobs:
  Ubuntu:
    name: build-ubuntu
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      # explicit include-based build matrix, of known valid options
      matrix:
        include:
          # 20.04 supports CUDA 11.0+
          - os: ubuntu-20.04
            cuda: "11.3"
            gcc: 10
    steps:
      - name: Installing dependencies (Ubuntu)
        run: sudo apt-get -y install openmpi-bin openmpi-common libopenmpi-dev ninja-build doxygen
      - name: Checkout
        uses: actions/checkout@v2
      - name: Creating dependencies directory (Ubuntu)
        shell: bash
        run: mkdir packages
      - name: Cmake version (Ubuntu)
        shell: bash
        run: cmake --version

      - name: search (Ubuntu)
        shell: bash
        run: sudo apt search openmpi
      - name: ls (Ubuntu)
        shell: bash
        run: sudo ls /usr/lib/x86_64-linux-gnu/openmpi
      - name: ls (Ubuntu)
        shell: bash
        run: sudo ls /usr/lib/x86_64-linux-gnu/openmpi/lib
      - name: Can ld find mpi (Ubuntu)
        shell: bash
        run: LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/lib/x86_64-linux-gnu/openmpi/lib/ ld -lmpi --verbose

      - name: Creating cuda directory (Ubuntu)
        shell: bash
        run: mkdir cuda
        working-directory: ${{ github.workspace }}/packages
      - name: Downloading cuda pin (Ubuntu)
        shell: bash
        run: wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin
        working-directory: ${{ github.workspace }}/packages/cuda
      - name: Moving cuda pin (Ubuntu)
        shell: bash
        run: sudo mv cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600
        working-directory: ${{ github.workspace }}/packages/cuda
      - name: Adding cuda key (Ubuntu)
        shell: bash
        run: sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/7fa2af80.pub
      - name: Adding cuda repository (Ubuntu)
        shell: bash
        run: sudo add-apt-repository "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/ /"
      - name: Apt update (Ubuntu)
        shell: bash
        run: sudo apt-get update
      - name: Installing cuda (Ubuntu)
        shell: bash
        run: sudo apt-get -y install cuda-11-3

      - name: Creating hdf5 directory (Ubuntu)
        shell: bash
        run: mkdir hdf5
        working-directory: ${{ github.workspace }}/packages
      - name: Creating hdf5 build directory (Ubuntu)
        shell: bash
        run: mkdir build
        working-directory: ${{ github.workspace }}/packages/hdf5
      - name: Creating hdf5 install directory (Ubuntu)
        shell: bash
        run: mkdir install
        working-directory: ${{ github.workspace }}/packages/hdf5
      - name: Downloading hdf5 (Ubuntu)
        shell: bash
        run: wget --output-document cmake-hdf5-1-12-1.tar.gz "https://www.hdfgroup.org/package/cmake-hdf5-1-12-1-tar-gz/?wpdmdl=15722&refresh=6181901c9cce41635880988"
        working-directory: ${{ github.workspace }}/packages/hdf5
      - name: Unzipping hdf5 (Ubuntu)
        shell: bash
        run: tar -xvf cmake-hdf5-1-12-1.tar.gz
        working-directory: ${{ github.workspace }}/packages/hdf5
      - name: Configuring hdf5 (Ubuntu)
        shell: bash
        run: LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/lib/x86_64-linux-gnu/openmpi/lib/ cmake ../CMake-hdf5-1.12.1/hdf5-1.12.1 -DCMAKE_CXX_FLAGS="-fuse-ld=lld" -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++ -GNinja -DBUILD_SHARED_LIBS=OFF -DBUILD_STATIC_EXECS=OFF -DBUILD_STATIC_LIBS=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/packages/hdf5/install" -DHDF5_BUILD_FORTRAN:BOOL=OFF -DHDF5_BUILD_JAVA:BOOL=OFF -DHDF5_ALLOW_EXTERNAL_SUPPORT:STRING=TGZ -DTGZPATH:PATH=${{ github.workspace }}/packages/hdf5/CMake-hdf5-1.12.1 -DHDF5_ENABLE_Z_LIB_SUPPORT:BOOL=OFF -DHDF5_ENABLE_SZIP_SUPPORT:BOOL=OFF -DHDF5_ENABLE_SZIP_ENCODING:BOOL=OFF -DHDF5_ENABLE_PARALLEL:BOOL=ON -DHDF5_BUILD_CPP_LIB:BOOL=OFF -DHDF5_BUILD_JAVA:BOOL=OFF -DHDF5_ENABLE_THREADSAFE:BOOL=OFF -DHDF5_PACKAGE_EXTLIBS:BOOL=ON -DHDF5_BUILD_EXAMPLES=OFF -DMPI_HOME=/usr/lib/x86_64-linux-gnu -DMPI_C_HEADER_DIR=/usr/lib/x86_64-linux-gnu/openmpi/include 
        working-directory: ${{ github.workspace }}/packages/hdf5/build
        env:
          I_MPI_ROOT: /usr/lib/x86_64-linux-gnu
        continue-on-error: true
      - name: what is happening please
        shell: bash
        run: ls
        working-directory: ${{ github.workspace }}/packages/hdf5/build
      - name: what is happening please
        shell: bash
        run: cat CMakeFiles/CMakeError.log
        working-directory: ${{ github.workspace }}/packages/hdf5/build
      - name: what is happening please
        shell: bash
        run: cat /usr/local/share/cmake-3.21/Modules/FindMPI.cmake
        working-directory: ${{ github.workspace }}/packages/hdf5/build
      - name: Building hdf5 (Ubuntu)
        shell: bash
        run: cmake --build .
        working-directory: ${{ github.workspace }}/packages/hdf5/build
      - name: Installing hdf5 (Ubuntu)
        shell: bash
        run: cmake --install .
        working-directory: ${{ github.workspace }}/packages/hdf5/build

      - name: Creating cgns directory (Ubuntu)
        shell: bash
        run: mkdir cgns
        working-directory: ${{ github.workspace }}/packages
      - name: Creating cgns build directory (Ubuntu)
        shell: bash
        run: mkdir build
        working-directory: ${{ github.workspace }}/packages/cgns
      - name: Creating cgns install directory (Ubuntu)
        shell: bash
        run: mkdir install
        working-directory: ${{ github.workspace }}/packages/cgns
      - name: Cloning cgns (Ubuntu)
        shell: bash
        run: git clone https://github.com/CGNS/CGNS.git
        working-directory: ${{ github.workspace }}/packages/cgns
      - name: Switching cgns branch (Ubuntu)
        shell: bash
        run: git checkout v4.2.0
        working-directory: ${{ github.workspace }}/packages/cgns/CGNS
      - name: Configuring cgns (Ubuntu)
        shell: bash
        run: cmake ../CGNS -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/packages/cgns/install" -DCGNS_BUILD_CGNS_TOOLS=OFF -DCGNS_BUILD_SHARED=OFF -DCGNS_BUILD_TESTING=OFF -DCGNS_ENABLE_64BITS=ON -DCMAKE_PREFIX_PATH:PATH="${{ github.workspace }}/packages/hdf5/install/share/cmake/hdf5" -DCGNS_ENABLE_FORTRAN:BOOL=OFF -DCGNS_USE_SHARED:BOOL=OFF -DCGNS_ENABLE_LEGACY=OFF -DCGNS_ENABLE_TESTS:BOOL=OFF -DCGNS_ENABLE_HDF5:BOOL=ON -DCGNS_ENABLE_PARALLEL:BOOL=ON -DHDF5_BUILD_SHARED_LIBS:BOOL=OFF -DHDF5_NEED_MPI:BOOL=ON -DHDF5_NEED_ZLIB:BOOL=OFF -DHDF5_NEED_SZIP:BOOL=OFF
        working-directory: ${{ github.workspace }}/packages/cgns/build
      - name: Building cgns (Ubuntu)
        shell: bash
        run: cmake --build .
        working-directory: ${{ github.workspace }}/packages/cgns/build
      - name: Installing cgns (Ubuntu)
        shell: bash
        run: cmake --install .
        working-directory: ${{ github.workspace }}/packages/cgns/build

      - name: Creating vtk directory (Ubuntu)
        shell: bash
        run: mkdir vtk
        working-directory: ${{ github.workspace }}/packages
      - name: Creating vtk build directory (Ubuntu)
        shell: bash
        run: mkdir build
        working-directory: ${{ github.workspace }}/packages/vtk
      - name: Creating vtk install directory (Ubuntu)
        shell: bash
        run: mkdir install
        working-directory: ${{ github.workspace }}/packages/vtk
      - name: Cloning vtk (Ubuntu)
        shell: bash
        run: git clone https://github.com/Kitware/VTK.git
        working-directory: ${{ github.workspace }}/packages/vtk
      - name: Switching vtk branch (Ubuntu)
        shell: bash
        run: git checkout v9.0.3
        working-directory: ${{ github.workspace }}/packages/vtk/VTK
      - name: Configuring vtk (Ubuntu)
        shell: bash
        run: cmake ../VTK -GNinja -DCMAKE_BUILD_TYPE=Debug DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/packages/vtk/install" -DCMAKE_PREFIX_PATH:PATH="${{ github.workspace }}/packages/hdf5/install/share/cmake/hdf5" -DINSTALL_CMAKE_PACKAGE_MODULE=ON -DVTK_GROUP_ENABLE_MPI=YES -DVTK_SMP_IMPLEMENTATION_TYPE=OpenMP -DVTK_USE_LARGE_DATA=ON -DVTK_USE_MPI=ON -DBUILD_SHARED_LIBS=OFF -DVTK_PYTHON_VERSION=3 -DVTK_WRAP_PYTHON=OFF -DVTK_WRAP_JAVA=OFF -DMPIEXEC_MAX_NUMPROCS=2 -DVTK_MODULE_ENABLE_VTK_AcceleratorsVTKm=NO -DVTK_MODULE_ENABLE_VTK_ChartsCore=NO -DVTK_MODULE_ENABLE_VTK_CommonArchive=NO -DVTK_MODULE_ENABLE_VTK_CommonColor=YES -DVTK_MODULE_ENABLE_VTK_CommonComputationalGeometry=YES -DVTK_MODULE_ENABLE_VTK_CommonCore=YES -DVTK_MODULE_ENABLE_VTK_CommonDataModel=DEFAULT -DVTK_MODULE_ENABLE_VTK_CommonExecutionModel=DEFAULT -DVTK_MODULE_ENABLE_VTK_CommonMath=DEFAULT -DVTK_MODULE_ENABLE_VTK_CommonMisc=DEFAULT -DVTK_MODULE_ENABLE_VTK_CommonSystem=DEFAULT -DVTK_MODULE_ENABLE_VTK_CommonTransforms=DEFAULT -DVTK_MODULE_ENABLE_VTK_DICOMParser=YES -DVTK_MODULE_ENABLE_VTK_DomainsChemistry=NO -DVTK_MODULE_ENABLE_VTK_DomainsChemistryOpenGL2=NO -DVTK_MODULE_ENABLE_VTK_DomainsMicroscopy=NO -DVTK_MODULE_ENABLE_VTK_DomainsParallelChemistry=NO -DVTK_MODULE_ENABLE_VTK_FiltersAMR=NO -DVTK_MODULE_ENABLE_VTK_FiltersCore=DEFAULT -DVTK_MODULE_ENABLE_VTK_FiltersExtraction=YES -DVTK_MODULE_ENABLE_VTK_FiltersFlowPaths=NO -DVTK_MODULE_ENABLE_VTK_FiltersGeneral=YES -DVTK_MODULE_ENABLE_VTK_FiltersGeneric=DEFAULT -DVTK_MODULE_ENABLE_VTK_FiltersGeometry=DEFAULT -DVTK_MODULE_ENABLE_VTK_FiltersHybrid=YES -DVTK_MODULE_ENABLE_VTK_FiltersHybridTree=NO -DVTK_MODULE_ENABLE_VTK_FiltersImaging=NO -DVTK_MODULE_ENABLE_VTK_FiltersModeling=YES -DVTK_MODULE_ENABLE_VTK_FiltersOpenTURNS=NO -DVTK_MODULE_ENABLE_VTK_FiltersParallel=YES -DVTK_MODULE_ENABLE_VTK_FiltersParallelDIY2=NO -DVTK_MODULE_ENABLE_VTK_FiltersParallelFlowPaths=NO -DVTK_MODULE_ENABLE_VTK_FiltersParallelGeometry=DEFAULT -DVTK_MODULE_ENABLE_VTK_FiltersParallelImaging=NO -DVTK_MODULE_ENABLE_VTK_FiltersParallelMPI=YES -DVTK_MODULE_ENABLE_VTK_FiltersParallelStatistics=NO -DVTK_MODULE_ENABLE_VTK_FiltersParallelVerdict=NO -DVTK_MODULE_ENABLE_VTK_FiltersPoints=NO -DVTK_MODULE_ENABLE_VTK_FiltersProgrammable=NO -DVTK_MODULE_ENABLE_VTK_FiltersReebGraph=NO -DVTK_MODULE_ENABLE_VTK_FiltersSMP=DEFAULT -DVTK_MODULE_ENABLE_VTK_FiltersSelection=DEFAULT -DVTK_MODULE_ENABLE_VTK_FiltersSources=YES -DVTK_MODULE_ENABLE_VTK_FiltersStatistics=YES -DVTK_MODULE_ENABLE_VTK_FiltersTexture=YES -DVTK_MODULE_ENABLE_VTK_FiltersTopology=NO -DVTK_MODULE_ENABLE_VTK_FiltersVerdict=NO -DVTK_MODULE_ENABLE_VTK_GUISupportMFC=NO -DVTK_MODULE_ENABLE_VTK_GUISupportQt=NO -DVTK_MODULE_ENABLE_VTK_GUISupportQtSQL=NO -DVTK_MODULE_ENABLE_VTK_GeovisCore=NO -DVTK_MODULE_ENABLE_VTK_GeovisGDAL=NO -DVTK_MODULE_ENABLE_VTK_IOADIOS2=NO -DVTK_MODULE_ENABLE_VTK_IOAMR=NO -DVTK_MODULE_ENABLE_VTK_IOAsynchronous=YES -DVTK_MODULE_ENABLE_VTK_IOCityGML=NO -DVTK_MODULE_ENABLE_VTK_IOCore=YES -DVTK_MODULE_ENABLE_VTK_IOEnSight=NO -DVTK_MODULE_ENABLE_VTK_IOExodus=NO -DVTK_MODULE_ENABLE_VTK_IOExodusGL2PS=NO -DVTK_MODULE_ENABLE_VTK_IOExportPDF=NO -DVTK_MODULE_ENABLE_VTK_IOFFMPEG=NO -DVTK_MODULE_ENABLE_VTK_IOGDAL=NO -DVTK_MODULE_ENABLE_VTK_IOGeoJSON=NO -DVTK_MODULE_ENABLE_VTK_IOGeometry=YES -DVTK_MODULE_ENABLE_VTK_IOH5part=DEFAULT -DVTK_MODULE_ENABLE_VTK_IOImage=YES -DVTK_MODULE_ENABLE_VTK_IOImport=NO -DVTK_MODULE_ENABLE_VTK_IOInfovis=NO -DVTK_MODULE_ENABLE_VTK_IOLAS=NO -DVTK_MODULE_ENABLE_VTK_IOSDyna=NO -DVTK_MODULE_ENABLE_VTK_IOLegacy=YES -DVTK_MODULE_ENABLE_VTK_IOMINC=NO -DVTK_MODULE_ENABLE_VTK_IOMPIImage=NO -DVTK_MODULE_ENABLE_VTK_IOMotionFX=NO -DVTK_MODULE_ENABLE_VTK_IOMovie=NO -DVTK_MODULE_ENABLE_VTK_IOMySQL=NO -DVTK_MODULE_ENABLE_VTK_IONetCDF=NO -DVTK_MODULE_ENABLE_VTK_IOODBC=NO -DVTK_MODULE_ENABLE_VTK_IOOggTheora=NO -DVTK_MODULE_ENABLE_VTK_IOPDAL=NO -DVTK_MODULE_ENABLE_VTK_IOPIO=DEFAULT -DVTK_MODULE_ENABLE_VTK_IOPLY=NO -DVTK_MODULE_ENABLE_VTK_IOParallel=YES -DVTK_MODULE_ENABLE_VTK_IOParallelExodus=NO -DVTK_MODULE_ENABLE_VTK_IOParallelLSDyna=NO -DVTK_MODULE_ENABLE_VTK_IOParallelNetCDF=NO -DVTK_MODULE_ENABLE_VTK_IOParallelXML=YES -DVTK_MODULE_ENABLE_VTK_IOParallelXdmf3=NO -DVTK_MODULE_ENABLE_VTK_IOPostgreSQL=NO -DVTK_MODULE_ENABLE_VTK_IOSQL=NO -DVTK_MODULE_ENABLE_VTK_IOSegY=NO -DVTK_MODULE_ENABLE_VTK_IOTRUCHAS=NO -DVTK_MODULE_ENABLE_VTK_IOTecplotTable=NO -DVTK_MODULE_ENABLE_VTK_IOVPIC=NO -DVTK_MODULE_ENABLE_VTK_IOVeraOut=NO -DVTK_MODULE_ENABLE_VTK_IOVideo=NO -DVTK_MODULE_ENABLE_VTK_IOVXML=YES -DVTK_MODULE_ENABLE_VTK_IOVXMLParser=YES -DVTK_MODULE_ENABLE_VTK_IOXdmf2=NO -DVTK_MODULE_ENABLE_VTK_IOXdmf3=NO -DVTK_MODULE_ENABLE_VTK_ImagingColor=NO -DVTK_MODULE_ENABLE_VTK_ImagingCore=YES -DVTK_MODULE_ENABLE_VTK_ImagingFourier=YES -DVTK_MODULE_ENABLE_VTK_ImagingGeneral=NO -DVTK_MODULE_ENABLE_VTK_ImagingHybrid=NO -DVTK_MODULE_ENABLE_VTK_ImagingMath=NO -DVTK_MODULE_ENABLE_VTK_ImagingMorphological=NO -DVTK_MODULE_ENABLE_VTK_ImagingOpenGL2=NO -DVTK_MODULE_ENABLE_VTK_ImagingSources=YES -DVTK_MODULE_ENABLE_VTK_ImagingStatistics=NO -DVTK_MODULE_ENABLE_VTK_ImagingStencil=NO -DVTK_MODULE_ENABLE_VTK_InfovisBoost=NO -DVTK_MODULE_ENABLE_VTK_InfovisCore=NO -DVTK_MODULE_ENABLE_VTK_InfovisLayout=NO -DVTK_MODULE_ENABLE_VTK_InteractionImage=NO -DVTK_MODULE_ENABLE_VTK_InteractionStyle=NO -DVTK_MODULE_ENABLE_VTK_InteractionWidgets=NO -DVTK_MODULE_ENABLE_VTK_MomentInvariants=NO -DVTK_MODULE_ENABLE_VTK_ParallelCore=YES -DVTK_MODULE_ENABLE_VTK_ParallelDIY=DEFAULT -DVTK_MODULE_ENABLE_VTK_ParallelMPI=YES -DVTK_MODULE_ENABLE_VTK_PoissonReconstruction=NO -DVTK_MODULE_ENABLE_VTK_Powercrust=NO -DVTK_MODULE_ENABLE_VTK_PythonInterpreter=NO -DVTK_MODULE_ENABLE_VTK_RenderingAnnotation=NO -DVTK_MODULE_ENABLE_VTK_RenderingContext2D=NO -DVTK_MODULE_ENABLE_VTK_RenderingContextOpenGL2=NO -DVTK_MODULE_ENABLE_VTK_RenderingCore=YES -DVTK_MODULE_ENABLE_VTK_RenderingExternal=NO -DVTK_MODULE_ENABLE_VTK_RenderingFreetype=NO -DVTK_MODULE_ENABLE_VTK_RenderingFreetypeFontConfig=NO -DVTK_MODULE_ENABLE_VTK_RenderingGL2PSOpenGL2=NO -DVTK_MODULE_ENABLE_VTK_RenderingImage=NO -DVTK_MODULE_ENABLE_VTK_RenderingLICOpenGL2=NO -DVTK_MODULE_ENABLE_VTK_RenderingLOD=NO -DVTK_MODULE_ENABLE_VTK_RenderingLabel=NO -DVTK_MODULE_ENABLE_VTK_RenderingMatplotlib=NO -DVTK_MODULE_ENABLE_VTK_RenderingOpenGL2=NO -DVTK_MODULE_ENABLE_VTK_RenderingOpenVR=NO -DVTK_MODULE_ENABLE_VTK_RenderingParallel=NO -DVTK_MODULE_ENABLE_VTK_RenderingParallelLIC=NO -DVTK_MODULE_ENABLE_VTK_RenderingQt=NO -DVTK_MODULE_ENABLE_VTK_RenderingRayTracing=NO -DVTK_MODULE_ENABLE_VTK_RenderingSceneGraph=NO -DVTK_MODULE_ENABLE_VTK_RenderingUI=NO -DVTK_MODULE_ENABLE_VTK_RenderingVolume=NO -DVTK_MODULE_ENABLE_VTK_RenderingVolumeAMR=NO -DVTK_MODULE_ENABLE_VTK_RenderingVolumeOpenGL2=NO -DVTK_MODULE_ENABLE_VTK_RenderingVtkJS=NO -DVTK_MODULE_ENABLE_VTK_SignedTensor=NO -DVTK_MODULE_ENABLE_VTK_SplineDrivenImageSlicer=NO -DVTK_MODULE_ENABLE_VTK_TestingCore=NO -DVTK_MODULE_ENABLE_VTK_TestingGenericBridge=NO -DVTK_MODULE_ENABLE_VTK_TestingIOSQL=NO -DVTK_MODULE_ENABLE_VTK_TestingRendering=NO -DVTK_MODULE_ENABLE_VTK_TestingBenchmarks=NO -DVTK_MODULE_ENABLE_VTK_ViewsContext2D=NO -DVTK_MODULE_ENABLE_VTK_ViewsCore=NO -DVTK_MODULE_ENABLE_VTK_ViewsInfovis=NO -DVTK_MODULE_ENABLE_VTK_ViewsQt=NO -DVTK_MODULE_ENABLE_VTK_WebCore=NO -DVTK_MODULE_ENABLE_VTK_WebGLExplorer=NO -DVTK_MODULE_ENABLE_VTK_WrappingPythonCore=NO -DVTK_MODULE_ENABLE_VTK_WrappingTools=NO
        working-directory: ${{ github.workspace }}/packages/vtk/build
      - name: Building vtk (Ubuntu)
        shell: bash
        run: cmake --build .
        working-directory: ${{ github.workspace }}/packages/vtk/build
      - name: Installing vtk (Ubuntu)
        shell: bash
        run: cmake --install .
        working-directory: ${{ github.workspace }}/packages/vtk/build

      - name: Creating build directory (Ubuntu)
        shell: bash
        run: mkdir build
      - name: Running CMake (Ubuntu)
        shell: bash
        run: cmake .. -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++ -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CUDA_ARCHITECTURES=60 -DBUILD_TESTING=ON -DBUILD_EXTRAS=ON -DBUILD_GPU=ON -DBUILD_CPU=ON -DBUILD_DOC=ON -DHDF5_DIR="${{ github.workspace }}/packages/hdf5/install/share/cmake/hdf5" -DCGNS_DIR="${{ github.workspace }}/packages/cgns/install/lib/cmake/CGNS" -DVTK_DIR="${{ github.workspace }}/packages/vtk/install/lib/cmake/vtk-9.0"
        working-directory: ${{ github.workspace }}/build
      - name: Build (Ubuntu)
        shell: bash
        run: cmake --build .
        working-directory: ${{ github.workspace }}/build
      - name: Tests (Ubuntu)
        shell: bash
        run: ctest
        working-directory: ${{ github.workspace }}/build