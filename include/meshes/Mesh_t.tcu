
#include "helpers/ProgressBar_t.h"

template<typename Polynomial>
void SEM::Device::Meshes::Mesh_t::solve(const deviceFloat CFL, const std::vector<deviceFloat> output_times, const SEM::Device::Entities::NDG_t<Polynomial> &NDG, deviceFloat viscosity) {
    int global_rank;
    MPI_Comm_rank(MPI_COMM_WORLD, &global_rank);
    deviceFloat time = 0.0;
    const deviceFloat t_end = output_times.back();
    SEM::Helpers::ProgressBar_t bar;
    size_t timestep = 0;

    deviceFloat delta_t = get_delta_t(CFL);
    write_data(time, NDG.N_interpolation_points_, NDG.interpolation_matrices_.data());
    if (global_rank == 0) {
        bar.update(0.0);
        bar.set_status_text("Iteration 0");
    }
    
    while (time < t_end) {
        ++timestep;
        delta_t = get_delta_t(CFL);
        if (time + delta_t > t_end) {
            delta_t = t_end - time;
        }

        // Kinda algorithm 62
        //deviceFloat t = time;
        SEM::Device::Entities::interpolate_to_boundaries<<<elements_numBlocks_, elements_blockSize_, 0, stream_>>>(N_elements_, elements_, NDG.lagrange_interpolant_left_.data(), NDG.lagrange_interpolant_right_.data());
        boundary_conditions();
        SEM::Device::Meshes::calculate_fluxes<<<faces_numBlocks_, faces_blockSize_, 0, stream_>>>(N_faces_, faces_, elements_);
        SEM::Device::Meshes::compute_dg_derivative<<<elements_numBlocks_, elements_blockSize_, 0, stream_>>>(N_elements_, elements_, faces_, NDG.weights_.data(), NDG.derivative_matrices_hat_.data(), NDG.lagrange_interpolant_left_.data(), NDG.lagrange_interpolant_right_.data());
        SEM::Device::Entities::interpolate_q_to_boundaries<<<elements_numBlocks_, elements_blockSize_, 0, stream_>>>(N_elements_, elements_, NDG.lagrange_interpolant_left_.data(), NDG.lagrange_interpolant_right_.data());
        boundary_conditions();
        SEM::Device::Meshes::calculate_q_fluxes<<<faces_numBlocks_, faces_blockSize_, 0, stream_>>>(N_faces_, faces_, elements_);
        SEM::Device::Meshes::compute_dg_derivative2<<<elements_numBlocks_, elements_blockSize_, 0, stream_>>>(viscosity, N_elements_, elements_, faces_, NDG.weights_.data(), NDG.derivative_matrices_hat_.data(), NDG.lagrange_interpolant_left_.data(), NDG.lagrange_interpolant_right_.data());
        SEM::Device::Meshes::rk3_first_step<<<elements_numBlocks_, elements_blockSize_, 0, stream_>>>(N_elements_, elements_, delta_t, 1.0/3.0);

        //t = time + 0.33333333333f * delta_t;
        SEM::Device::Entities::interpolate_to_boundaries<<<elements_numBlocks_, elements_blockSize_, 0, stream_>>>(N_elements_, elements_, NDG.lagrange_interpolant_left_.data(), NDG.lagrange_interpolant_right_.data());
        boundary_conditions();
        SEM::Device::Meshes::calculate_fluxes<<<faces_numBlocks_, faces_blockSize_, 0, stream_>>>(N_faces_, faces_, elements_);
        SEM::Device::Meshes::compute_dg_derivative<<<elements_numBlocks_, elements_blockSize_, 0, stream_>>>(N_elements_, elements_, faces_, NDG.weights_.data(), NDG.derivative_matrices_hat_.data(), NDG.lagrange_interpolant_left_.data(), NDG.lagrange_interpolant_right_.data());
        SEM::Device::Entities::interpolate_q_to_boundaries<<<elements_numBlocks_, elements_blockSize_, 0, stream_>>>(N_elements_, elements_, NDG.lagrange_interpolant_left_.data(), NDG.lagrange_interpolant_right_.data());
        boundary_conditions();
        SEM::Device::Meshes::calculate_q_fluxes<<<faces_numBlocks_, faces_blockSize_, 0, stream_>>>(N_faces_, faces_, elements_);
        SEM::Device::Meshes::compute_dg_derivative2<<<elements_numBlocks_, elements_blockSize_, 0, stream_>>>(viscosity, N_elements_, elements_, faces_, NDG.weights_.data(), NDG.derivative_matrices_hat_.data(), NDG.lagrange_interpolant_left_.data(), NDG.lagrange_interpolant_right_.data());
        SEM::Device::Meshes::rk3_step<<<elements_numBlocks_, elements_blockSize_, 0, stream_>>>(N_elements_, elements_, delta_t, -5.0/9.0, 15.0/16.0);

       // t = time + 0.75f * delta_t;
        SEM::Device::Entities::interpolate_to_boundaries<<<elements_numBlocks_, elements_blockSize_, 0, stream_>>>(N_elements_, elements_, NDG.lagrange_interpolant_left_.data(), NDG.lagrange_interpolant_right_.data());
        boundary_conditions();
        SEM::Device::Meshes::calculate_fluxes<<<faces_numBlocks_, faces_blockSize_, 0, stream_>>>(N_faces_, faces_, elements_);
        SEM::Device::Meshes::compute_dg_derivative<<<elements_numBlocks_, elements_blockSize_, 0, stream_>>>(N_elements_, elements_, faces_, NDG.weights_.data(), NDG.derivative_matrices_hat_.data(), NDG.lagrange_interpolant_left_.data(), NDG.lagrange_interpolant_right_.data());
        SEM::Device::Entities::interpolate_q_to_boundaries<<<elements_numBlocks_, elements_blockSize_, 0, stream_>>>(N_elements_, elements_, NDG.lagrange_interpolant_left_.data(), NDG.lagrange_interpolant_right_.data());
        boundary_conditions();
        SEM::Device::Meshes::calculate_q_fluxes<<<faces_numBlocks_, faces_blockSize_, 0, stream_>>>(N_faces_, faces_, elements_);
        SEM::Device::Meshes::compute_dg_derivative2<<<elements_numBlocks_, elements_blockSize_, 0, stream_>>>(viscosity, N_elements_, elements_, faces_, NDG.weights_.data(), NDG.derivative_matrices_hat_.data(), NDG.lagrange_interpolant_left_.data(), NDG.lagrange_interpolant_right_.data());
        SEM::Device::Meshes::rk3_step<<<elements_numBlocks_, elements_blockSize_, 0, stream_>>>(N_elements_, elements_, delta_t, -153.0/128.0, 8.0/15.0);

        time += delta_t;
        if (global_rank == 0) {
            std::stringstream ss;
            bar.update(time/t_end);
            ss << "Iteration " << timestep;
            bar.set_status_text(ss.str());
        }
        for (auto const& e : std::as_const(output_times)) {
            if ((time >= e) && (time < e + delta_t)) {
                SEM::Device::Entities::estimate_error<Polynomial><<<elements_numBlocks_, elements_blockSize_, 0, stream_>>>(N_elements_, elements_, NDG.nodes_.data(), NDG.weights_.data());
                write_data(time, NDG.N_interpolation_points_, NDG.interpolation_matrices_.data());
                break;
            }
        }

        if (timestep % adaptivity_interval_ == 0) {
            SEM::Device::Entities::estimate_error<Polynomial><<<elements_numBlocks_, elements_blockSize_, 0, stream_>>>(N_elements_, elements_, NDG.nodes_.data(), NDG.weights_.data());
            adapt(NDG.N_max_, NDG.nodes_.data(), NDG.barycentric_weights_.data());
        }
    }
    if (global_rank == 0) {
        std::cout << std::endl;
    }

    bool did_write = false;
    for (auto const& e : std::as_const(output_times)) {
        if ((time >= e) && (time < e + delta_t)) {
            did_write = true;
            break;
        }
    }

    if (!did_write) {
        SEM::Device::Entities::estimate_error<Polynomial><<<elements_numBlocks_, elements_blockSize_, 0, stream_>>>(N_elements_, elements_, NDG.nodes_.data(), NDG.weights_.data());
        write_data(time, NDG.N_interpolation_points_, NDG.interpolation_matrices_.data());
    }
}

// From https://developer.download.nvidia.com/assets/cuda/files/reduction.pdf
template <unsigned int blockSize>
__device__ 
void SEM::Device::Meshes::warp_reduce_delta_t(volatile deviceFloat *sdata, unsigned int tid) {
    if (blockSize >= 64) sdata[tid] = std::min(sdata[tid], sdata[tid + 32]);
    if (blockSize >= 32) sdata[tid] = std::min(sdata[tid], sdata[tid + 16]);
    if (blockSize >= 16) sdata[tid] = std::min(sdata[tid], sdata[tid + 8]);
    if (blockSize >= 8) sdata[tid] = std::min(sdata[tid], sdata[tid + 4]);
    if (blockSize >= 4) sdata[tid] = std::min(sdata[tid], sdata[tid + 2]);
    if (blockSize >= 2) sdata[tid] = std::min(sdata[tid], sdata[tid + 1]);
}

// From https://developer.download.nvidia.com/assets/cuda/files/reduction.pdf
template <unsigned int blockSize>
__global__ 
void SEM::Device::Meshes::reduce_delta_t(deviceFloat CFL, size_t N_elements, const SEM::Device::Entities::Element_t* elements, deviceFloat *g_odata) {
    __shared__ deviceFloat sdata[(blockSize >= 64) ? blockSize : blockSize + blockSize/2]; // Because within a warp there is no branching and this is read up until blockSize + blockSize/2
    unsigned int tid = threadIdx.x;
    size_t i = blockIdx.x*(blockSize*2) + tid;
    unsigned int gridSize = blockSize*2*gridDim.x;
    sdata[tid] = std::numeric_limits<deviceFloat>::infinity();

    while (i < N_elements) { 
        deviceFloat phi_max = 0.0;
        for (int j = 0; j <= elements[i].N_; ++j) {
            phi_max = std::max(phi_max, abs(elements[i].phi_[j]));
        }
        const deviceFloat delta_t_nl = CFL * elements[i].delta_x_/(phi_max * elements[i].N_ * elements[i].N_);
        const deviceFloat delta_t_viscous = CFL * elements[i].delta_x_ * elements[i].delta_x_/(elements[i].N_ * elements[i].N_);
        deviceFloat delta_t = std::min(delta_t_nl, delta_t_viscous);

        if (i+blockSize < N_elements) {
            phi_max = 0.0;
            for (int j = 0; j <= elements[i+blockSize].N_; ++j) {
                phi_max = std::max(phi_max, abs(elements[i+blockSize].phi_[j]));
            }
            const deviceFloat delta_t_nl = CFL * elements[i+blockSize].delta_x_/(phi_max * elements[i+blockSize].N_ * elements[i+blockSize].N_);
            const deviceFloat delta_t_viscous = CFL * elements[i+blockSize].delta_x_ * elements[i+blockSize].delta_x_/(elements[i+blockSize].N_ * elements[i+blockSize].N_);
            delta_t = std::min(delta_t, std::min(delta_t_nl, delta_t_viscous));
        }

        sdata[tid] = std::min(sdata[tid], delta_t); 
        i += gridSize; 
    }
    __syncthreads();

    if (blockSize >= 8192) { if (tid < 4096) { sdata[tid] = std::min(sdata[tid], sdata[tid + 4096]); } __syncthreads(); }
    if (blockSize >= 4096) { if (tid < 2048) { sdata[tid] = std::min(sdata[tid], sdata[tid + 2048]); } __syncthreads(); }
    if (blockSize >= 2048) { if (tid < 1024) { sdata[tid] = std::min(sdata[tid], sdata[tid + 1024]); } __syncthreads(); }
    if (blockSize >= 1024) { if (tid < 512) { sdata[tid] = std::min(sdata[tid], sdata[tid + 512]); } __syncthreads(); }
    if (blockSize >= 512) { if (tid < 256) { sdata[tid] = std::min(sdata[tid], sdata[tid + 256]); } __syncthreads(); }
    if (blockSize >= 256) { if (tid < 128) { sdata[tid] = std::min(sdata[tid], sdata[tid + 128]); } __syncthreads(); }
    if (blockSize >= 128) { if (tid < 64) { sdata[tid] = std::min(sdata[tid], sdata[tid + 64]); } __syncthreads(); }

    if (tid < 32) warp_reduce_delta_t<blockSize>(sdata, tid);
    if (tid == 0) g_odata[blockIdx.x] = sdata[0];
}

// From https://developer.download.nvidia.com/assets/cuda/files/reduction.pdf
template <unsigned int blockSize>
__device__ 
void SEM::Device::Meshes::warp_reduce_refine(volatile unsigned long *sdata, unsigned int tid) {
    if (blockSize >= 64) sdata[tid] += sdata[tid + 32];
    if (blockSize >= 32) sdata[tid] += sdata[tid + 16];
    if (blockSize >= 16) sdata[tid] += sdata[tid + 8];
    if (blockSize >= 8) sdata[tid] += sdata[tid + 4];
    if (blockSize >= 4) sdata[tid] += sdata[tid + 2];
    if (blockSize >= 2) sdata[tid] += sdata[tid + 1];
}

// From https://developer.download.nvidia.com/assets/cuda/files/reduction.pdf
template <unsigned int blockSize>
__global__ 
void SEM::Device::Meshes::reduce_refine(size_t N_elements, deviceFloat delta_x_min, const SEM::Device::Entities::Element_t* elements, unsigned long *g_odata) {
    __shared__ unsigned long sdata[(blockSize >= 64) ? blockSize : blockSize + blockSize/2]; // Because within a warp there is no branching and this is read up until blockSize + blockSize/2
    unsigned int tid = threadIdx.x;
    size_t i = blockIdx.x*(blockSize*2) + tid;
    unsigned int gridSize = blockSize*2*gridDim.x;
    sdata[tid] = 0;

    while (i < N_elements) { 
        sdata[tid] += elements[i].refine_ * (elements[i].sigma_ < 1.0) * (elements[i].delta_x_/2 >= delta_x_min);
        if (i+blockSize < N_elements) {
            sdata[tid] += elements[i+blockSize].refine_ * (elements[i+blockSize].sigma_ < 1.0) * (elements[i+blockSize].delta_x_/2 >= delta_x_min);
        }
        i += gridSize; 
    }
    __syncthreads();

    if (blockSize >= 8192) { if (tid < 4096) { sdata[tid] += sdata[tid + 4096]; } __syncthreads(); }
    if (blockSize >= 4096) { if (tid < 2048) { sdata[tid] += sdata[tid + 2048]; } __syncthreads(); }
    if (blockSize >= 2048) { if (tid < 1024) { sdata[tid] += sdata[tid + 1024]; } __syncthreads(); }
    if (blockSize >= 1024) { if (tid < 512) { sdata[tid] += sdata[tid + 512]; } __syncthreads(); }
    if (blockSize >= 512) { if (tid < 256) { sdata[tid] += sdata[tid + 256]; } __syncthreads(); }
    if (blockSize >= 256) { if (tid < 128) { sdata[tid] += sdata[tid + 128]; } __syncthreads(); }
    if (blockSize >= 128) { if (tid < 64) { sdata[tid] += sdata[tid + 64]; } __syncthreads(); }

    if (tid < 32) warp_reduce_refine<blockSize>(sdata, tid);
    if (tid == 0) g_odata[blockIdx.x] = sdata[0];
}