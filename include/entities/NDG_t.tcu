#include <cmath>
#include <iostream>
#include <fstream>
#include <sstream> 
#include <iomanip>
#include <vector>

constexpr int poly_blockSize = 16; // Small number of threads per block because N will never be huge
constexpr int interpolation_blockSize = 32;
const dim3 matrix_blockSize(16, 16); // Small number of threads per block because N will never be huge

template<typename Polynomial>
SEM::Device::Entities::NDG_t<Polynomial>::NDG_t(int N_max, size_t n_interpolation_points, const cudaStream_t &stream) : 
        N_max_(N_max), 
        N_interpolation_points_(n_interpolation_points),
        vector_length_((N_max_ + 1) * (N_max_ + 2)/2), 
        matrix_length_((N_max_ + 1) * (N_max_ + 2) * (2 * N_max_ + 3)/6),
        interpolation_length_((N_max_ + 1) * (N_max_ + 2) * N_interpolation_points_/2),
        nodes_{vector_length_, stream},
        weights_{vector_length_, stream},
        barycentric_weights_{vector_length_, stream},
        lagrange_interpolant_left_{vector_length_, stream},
        lagrange_interpolant_right_{vector_length_, stream},
        lagrange_interpolant_derivative_left_{vector_length_, stream},
        lagrange_interpolant_derivative_right_{vector_length_, stream},
        derivative_matrices_{matrix_length_, stream},
        g_hat_derivative_matrices_{matrix_length_, stream},
        derivative_matrices_hat_{matrix_length_, stream},
        interpolation_matrices_{interpolation_length_, stream},
        polynomials_{matrix_length_, stream} {

    Polynomial::nodes_and_weights(N_max_, poly_blockSize, nodes_.data(), weights_.data(), stream);

    // Nodes are needed to compute barycentric weights
    for (int N = 0; N <= N_max_; ++N) {
        const int vector_numBlocks = (N + poly_blockSize) / poly_blockSize; // Should be (N + poly_blockSize - 1) if N is not inclusive
        const dim3 matrix_numBlocks((N +  matrix_blockSize.x) / matrix_blockSize.x, (N +  matrix_blockSize.y) / matrix_blockSize.y); // Should be (N + poly_blockSize - 1) if N is not inclusive
        SEM::Device::Entities::calculate_barycentric_weights<<<vector_numBlocks, poly_blockSize, 0, stream>>>(N, nodes_.data(), barycentric_weights_.data());
        SEM::Device::Entities::calculate_polynomials<<<matrix_numBlocks, matrix_blockSize, 0, stream>>>(N, nodes_.data(), polynomials_.data(), weights_.data());
    }

    // We need the barycentric weights for derivative matrix, interpolation matrices and Lagrange interpolants
    const int interpolation_numBlocks = (N_interpolation_points_ + interpolation_blockSize) / interpolation_blockSize;
    for (int N = 0; N <= N_max_; ++N) {
        const dim3 matrix_numBlocks((N +  matrix_blockSize.x) / matrix_blockSize.x, (N +  matrix_blockSize.y) / matrix_blockSize.y); // Should be (N + poly_blockSize - 1) if N is not inclusive
        const int vector_numBlocks = (N + poly_blockSize) / poly_blockSize; // Should be (N + poly_blockSize - 1) if N is not inclusive
        SEM::Device::Entities::polynomial_derivative_matrices<<<matrix_numBlocks, matrix_blockSize, 0, stream>>>(N, nodes_.data(), barycentric_weights_.data(), derivative_matrices_.data());
        SEM::Device::Entities::create_interpolation_matrices<<<interpolation_numBlocks, interpolation_blockSize, 0, stream>>>(N, N_interpolation_points_, nodes_.data(), barycentric_weights_.data(), interpolation_matrices_.data());
        SEM::Device::Entities::lagrange_interpolating_polynomials<<<vector_numBlocks, poly_blockSize, 0, stream>>>(-1.0f, N, nodes_.data(), barycentric_weights_.data(), lagrange_interpolant_left_.data());
        SEM::Device::Entities::lagrange_interpolating_polynomials<<<vector_numBlocks, poly_blockSize, 0, stream>>>(1.0f, N, nodes_.data(), barycentric_weights_.data(), lagrange_interpolant_right_.data());
        SEM::Device::Entities::lagrange_interpolating_derivative_polynomials<<<vector_numBlocks, poly_blockSize, 0, stream>>>(-1.0f, N, nodes_.data(), barycentric_weights_.data(), lagrange_interpolant_derivative_left_.data());
        SEM::Device::Entities::lagrange_interpolating_derivative_polynomials<<<vector_numBlocks, poly_blockSize, 0, stream>>>(1.0f, N, nodes_.data(), barycentric_weights_.data(), lagrange_interpolant_derivative_right_.data());
    }

    // Then we calculate the derivative matrix diagonal and normalize the Lagrange interpolants
    const int poly_numBlocks = (N_max_ + poly_blockSize) / poly_blockSize;
    SEM::Device::Entities::normalize_lagrange_interpolating_polynomials<<<poly_numBlocks, poly_blockSize, 0, stream>>>(N_max_, lagrange_interpolant_left_.data());
    SEM::Device::Entities::normalize_lagrange_interpolating_polynomials<<<poly_numBlocks, poly_blockSize, 0, stream>>>(N_max_, lagrange_interpolant_right_.data());
    SEM::Device::Entities::normalize_lagrange_interpolating_derivative_polynomials<<<poly_numBlocks, poly_blockSize, 0, stream>>>(-1.0f, N_max_, nodes_.data(), barycentric_weights_.data(), lagrange_interpolant_derivative_left_.data());
    SEM::Device::Entities::normalize_lagrange_interpolating_derivative_polynomials<<<poly_numBlocks, poly_blockSize, 0, stream>>>(1.0f, N_max_, nodes_.data(), barycentric_weights_.data(), lagrange_interpolant_derivative_right_.data());
    for (int N = 0; N <= N_max_; ++N) {
        const int vector_numBlocks = (N + poly_blockSize) / poly_blockSize; // Should be (N + poly_blockSize - 1) if N is not inclusive
        SEM::Device::Entities::polynomial_derivative_matrices_diagonal<<<vector_numBlocks, poly_blockSize, 0, stream>>>(N, derivative_matrices_.data());
    }

    // All the derivative matrix has to be computed before D^
    for (int N = 0; N <= N_max_; ++N) {
        const dim3 matrix_numBlocks((N +  matrix_blockSize.x) / matrix_blockSize.x, (N +  matrix_blockSize.y) / matrix_blockSize.y); // Should be (N + poly_blockSize - 1) if N is not inclusive
        SEM::Device::Entities::polynomial_cg_derivative_matrices<<<matrix_numBlocks, matrix_blockSize, 0, stream>>>(N, weights_.data(), derivative_matrices_.data(), g_hat_derivative_matrices_.data());
        SEM::Device::Entities::polynomial_derivative_matrices_hat<<<matrix_numBlocks, matrix_blockSize, 0, stream>>>(N, weights_.data(), derivative_matrices_.data(), derivative_matrices_hat_.data());
    }
}
   
template<typename Polynomial>
void SEM::Device::Entities::NDG_t<Polynomial>::print() {
    // Copy vectors from device memory to host memory
    std::vector<deviceFloat> host_nodes(vector_length_);
    std::vector<deviceFloat> host_weights(vector_length_);
    std::vector<deviceFloat> host_barycentric_weights(vector_length_);
    std::vector<deviceFloat> host_lagrange_interpolant_left(vector_length_);
    std::vector<deviceFloat> host_lagrange_interpolant_right(vector_length_);
    std::vector<deviceFloat> host_lagrange_interpolant_derivative_left(vector_length_);
    std::vector<deviceFloat> host_lagrange_interpolant_derivative_right(vector_length_);
    std::vector<deviceFloat> host_derivative_matrices(matrix_length_);
    std::vector<deviceFloat> host_g_hat_derivative_matrices(matrix_length_);
    std::vector<deviceFloat> host_derivative_matrices_hat(matrix_length_);
    std::vector<deviceFloat> host_interpolation_matrices(interpolation_length_);
    std::vector<deviceFloat> host_polynomials(matrix_length_);

    nodes_.copy_to(host_nodes);
    weights_.copy_to(host_weights);
    barycentric_weights_.copy_to(host_barycentric_weights);
    lagrange_interpolant_left_.copy_to(host_lagrange_interpolant_left);
    lagrange_interpolant_right_.copy_to(host_lagrange_interpolant_right);
    lagrange_interpolant_derivative_left_.copy_to(host_lagrange_interpolant_derivative_left);
    lagrange_interpolant_derivative_right_.copy_to(host_lagrange_interpolant_derivative_right);
    derivative_matrices_.copy_to(host_derivative_matrices);
    g_hat_derivative_matrices_.copy_to(host_g_hat_derivative_matrices);
    derivative_matrices_hat_.copy_to(host_derivative_matrices_hat);
    interpolation_matrices_.copy_to(host_interpolation_matrices);
    polynomials_.copy_to(host_polynomials);

    std::cout << "Nodes: " << std::endl;
    for (int N = 0; N <= N_max_; ++N) {
        const size_t offset = N * (N + 1) /2;

        std::cout << '\t' << "N = " << N << ": ";
        std::cout << '\t' << '\t';
        for (int i = 0; i <= N; ++i) {
            std::cout << host_nodes[offset + i] << " ";
        }
        std::cout << std::endl;
    }

    std::cout << std::endl << "Weights: " << std::endl;
    for (int N = 0; N <= N_max_; ++N) {
        const size_t offset = N * (N + 1) /2;

        std::cout << '\t' << "N = " << N << ": ";
        std::cout << '\t' << '\t';
        for (int i = 0; i <= N; ++i) {
            std::cout << host_weights[offset + i] << " ";
        }
        std::cout << std::endl;
    }
    
    std::cout << std::endl << "Barycentric weights: " << std::endl;
    for (int N = 0; N <= N_max_; ++N) {
        const size_t offset = N * (N + 1) /2;

        std::cout << '\t' << "N = " << N << ": ";
        std::cout << '\t' << '\t';
        for (int i = 0; i <= N; ++i) {
            std::cout << host_barycentric_weights[offset + i] << " ";
        }
        std::cout << std::endl;
    }

    std::cout << std::endl << "Lagrange interpolants -1: " << std::endl;
    for (int N = 0; N <= N_max_; ++N) {
        const size_t offset = N * (N + 1) /2;

        std::cout << '\t' << "N = " << N << ": ";
        std::cout << '\t' << '\t';
        for (int i = 0; i <= N; ++i) {
            std::cout << host_lagrange_interpolant_left[offset + i] << " ";
        }
        std::cout << std::endl;
    }

    std::cout << std::endl << "Lagrange interpolants +1: " << std::endl;
    for (int N = 0; N <= N_max_; ++N) {
        const size_t offset = N * (N + 1) /2;

        std::cout << '\t' << "N = " << N << ": ";
        std::cout << '\t' << '\t';
        for (int i = 0; i <= N; ++i) {
            std::cout << host_lagrange_interpolant_right[offset + i] << " ";
        }
        std::cout << std::endl;
    }

    std::cout << std::endl << "Lagrange interpolants derivatives -1: " << std::endl;
    for (int N = 0; N <= N_max_; ++N) {
        const size_t offset = N * (N + 1) /2;

        std::cout << '\t' << "N = " << N << ": ";
        std::cout << '\t' << '\t';
        for (int i = 0; i <= N; ++i) {
            std::cout << host_lagrange_interpolant_derivative_left[offset + i] << " ";
        }
        std::cout << std::endl;
    }

    std::cout << std::endl << "Lagrange interpolants derivatives +1: " << std::endl;
    for (int N = 0; N <= N_max_; ++N) {
        const size_t offset = N * (N + 1) /2;

        std::cout << '\t' << "N = " << N << ": ";
        std::cout << '\t' << '\t';
        for (int i = 0; i <= N; ++i) {
            std::cout << host_lagrange_interpolant_derivative_right[offset + i] << " ";
        }
        std::cout << std::endl;
    }

    std::cout << std::endl << "Derivative matrices: " << std::endl;
    for (int N = 0; N <= N_max_; ++N) {
        const size_t offset_2D = N * (N + 1) * (2 * N + 1) /6;

        std::cout << '\t' << "N = " << N << ": " << std::endl;
        for (int i = 0; i <= N; ++i) {
            std::cout << '\t' << '\t';
            for (int j = 0; j <= N; ++j) {
                std::cout << host_derivative_matrices[offset_2D + i * (N + 1) + j] << " ";
            }
            std::cout << std::endl;
        }
    }

    std::cout << std::endl << "CG derivative matrices: " << std::endl;
    for (int N = 0; N <= N_max_; ++N) {
        const size_t offset_2D = N * (N + 1) * (2 * N + 1) /6;

        std::cout << '\t' << "N = " << N << ": " << std::endl;
        for (int i = 0; i <= N; ++i) {
            std::cout << '\t' << '\t';
            for (int j = 0; j <= N; ++j) {
                std::cout << host_g_hat_derivative_matrices[offset_2D + i * (N + 1) + j] << " ";
            }
            std::cout << std::endl;
        }
    }

    std::cout << std::endl << "Derivative matrices hat: " << std::endl;
    for (int N = 0; N <= N_max_; ++N) {
        const size_t offset_2D = N * (N + 1) * (2 * N + 1) /6;

        std::cout << '\t' << "N = " << N << ": " << std::endl;
        for (int i = 0; i <= N; ++i) {
            std::cout << '\t' << '\t';
            for (int j = 0; j <= N; ++j) {
                std::cout << host_derivative_matrices_hat[offset_2D + i * (N + 1) + j] << " ";
            }
            std::cout << std::endl;
        }
    }

    std::cout << std::endl << "Interpolation matrices: " << std::endl;
    for (int N = 0; N <= N_max_; ++N) {
        const size_t offset_interp = N * (N + 1) * N_interpolation_points_/2;

        std::cout << '\t' << "N = " << N << ": " << std::endl;
        for (int i = 0; i < N_interpolation_points_; ++i) {
            std::cout << '\t' << '\t';
            for (int j = 0; j <= N; ++j) {
                std::cout << host_interpolation_matrices[offset_interp + i * (N + 1) + j] << " ";
            }
            std::cout << std::endl;
        }
    }

    std::cout << std::endl << "Polynomials: " << std::endl;
    for (int N = 0; N <= N_max_; ++N) {
        const size_t offset_2D = N * (N + 1) * (2 * N + 1) /6;

        std::cout << '\t' << "N = " << N << ": " << std::endl;
        for (int i = 0; i <= N; ++i) {
            std::cout << '\t' << '\t';
            for (int j = 0; j <= N; ++j) {
                std::cout << host_polynomials[offset_2D + i * (N + 1) + j] << " ";
            }
            std::cout << std::endl;
        }
    }
}
