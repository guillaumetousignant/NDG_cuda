#include "helpers/ProgressBar_t.h"

template<typename Polynomial>
auto SEM::Device::Solvers::Solver2D_t::solve(const SEM::Device::Entities::NDG_t<Polynomial> &NDG, SEM::Device::Meshes::Mesh2D_t& mesh, const SEM::Helpers::DataWriter_t& data_writer) const -> void {
    int global_rank;
    MPI_Comm_rank(MPI_COMM_WORLD, &global_rank);
    int global_size;
    MPI_Comm_size(MPI_COMM_WORLD, &global_size);
    deviceFloat time = 0.0;
    const deviceFloat t_end = output_times_.back();
    SEM::Helpers::ProgressBar_t bar;
    size_t timestep = 0;
    constexpr std::array<deviceFloat, 3> am {0, -5.0/9.0, -153.0/128.0};
    constexpr std::array<deviceFloat, 3> bm {0, 1.0/3.0, 0.75};
    constexpr std::array<deviceFloat, 3> gm {1.0/3.0, 15.0/16.0, 8.0/15.0};

    deviceFloat delta_t = get_delta_t(mesh);

    for (auto const& e : std::as_const(output_times_)) {
        if ((time >= e) && (time < e + delta_t)) {
            if (global_rank == 0) {
                bar.set_status_text("Writing solution");
                bar.update(0.0);
            }
            mesh.write_complete_data(time, NDG.nodes_, NDG.interpolation_matrices_, data_writer);
        }
    }
    
    if (global_rank == 0) {
        bar.set_status_text("Iteration 0");
        bar.update(0.0);
    }
    
    while (time < t_end) {
        ++timestep;
        delta_t = get_delta_t(mesh);
        if (time + delta_t > t_end) {
            delta_t = t_end - time;
        }

        // Kinda algorithm 62
        deviceFloat t = time + bm[0] * delta_t;
        mesh.interpolate_to_boundaries(NDG.lagrange_interpolant_left_, NDG.lagrange_interpolant_right_);
        mesh.boundary_conditions(t, NDG.nodes_, NDG.weights_, NDG.barycentric_weights_);
        mesh.project_to_faces(NDG.nodes_, NDG.barycentric_weights_);
        SEM::Device::Solvers::calculate_wave_fluxes<<<mesh.faces_numBlocks_, mesh.faces_blockSize_, 0, mesh.stream_>>>(mesh.faces_.size(), mesh.faces_.data());
        mesh.project_to_elements(NDG.nodes_, NDG.weights_, NDG.barycentric_weights_);
        SEM::Device::Solvers::compute_dg_wave_derivative<<<mesh.elements_numBlocks_, mesh.elements_blockSize_, 0, mesh.stream_>>>(mesh.n_elements_, mesh.elements_.data(), mesh.faces_.data(), NDG.weights_.data(), NDG.derivative_matrices_hat_.data(), NDG.lagrange_interpolant_left_.data(), NDG.lagrange_interpolant_right_.data());
        SEM::Device::Solvers::rk3_first_step<<<mesh.elements_numBlocks_, mesh.elements_blockSize_, 0, mesh.stream_>>>(mesh.n_elements_, mesh.elements_.data(), delta_t, gm[0]);

        t = time + bm[1] * delta_t;
        mesh.interpolate_to_boundaries(NDG.lagrange_interpolant_left_, NDG.lagrange_interpolant_right_);
        mesh.boundary_conditions(t, NDG.nodes_, NDG.weights_, NDG.barycentric_weights_);
        mesh.project_to_faces(NDG.nodes_, NDG.barycentric_weights_);
        SEM::Device::Solvers::calculate_wave_fluxes<<<mesh.faces_numBlocks_, mesh.faces_blockSize_, 0, mesh.stream_>>>(mesh.faces_.size(), mesh.faces_.data());
        mesh.project_to_elements(NDG.nodes_, NDG.weights_, NDG.barycentric_weights_);
        SEM::Device::Solvers::compute_dg_wave_derivative<<<mesh.elements_numBlocks_, mesh.elements_blockSize_, 0, mesh.stream_>>>(mesh.n_elements_, mesh.elements_.data(), mesh.faces_.data(), NDG.weights_.data(), NDG.derivative_matrices_hat_.data(), NDG.lagrange_interpolant_left_.data(), NDG.lagrange_interpolant_right_.data());
        SEM::Device::Solvers::rk3_step<<<mesh.elements_numBlocks_, mesh.elements_blockSize_, 0, mesh.stream_>>>(mesh.n_elements_, mesh.elements_.data(), delta_t, am[1], gm[1]);

        t = time + bm[2] * delta_t;
        mesh.interpolate_to_boundaries(NDG.lagrange_interpolant_left_, NDG.lagrange_interpolant_right_);
        mesh.boundary_conditions(t, NDG.nodes_, NDG.weights_, NDG.barycentric_weights_);
        mesh.project_to_faces(NDG.nodes_, NDG.barycentric_weights_);
        SEM::Device::Solvers::calculate_wave_fluxes<<<mesh.faces_numBlocks_, mesh.faces_blockSize_, 0, mesh.stream_>>>(mesh.faces_.size(), mesh.faces_.data());
        mesh.project_to_elements(NDG.nodes_, NDG.weights_, NDG.barycentric_weights_);
        SEM::Device::Solvers::compute_dg_wave_derivative<<<mesh.elements_numBlocks_, mesh.elements_blockSize_, 0, mesh.stream_>>>(mesh.n_elements_, mesh.elements_.data(), mesh.faces_.data(), NDG.weights_.data(), NDG.derivative_matrices_hat_.data(), NDG.lagrange_interpolant_left_.data(), NDG.lagrange_interpolant_right_.data());
        SEM::Device::Solvers::rk3_step<<<mesh.elements_numBlocks_, mesh.elements_blockSize_, 0, mesh.stream_>>>(mesh.n_elements_, mesh.elements_.data(), delta_t, am[2], gm[2]);
        
        time += delta_t;
        for (auto const& e : std::as_const(output_times_)) {
            if ((time >= e) && (time < e + delta_t)) {
                if (global_rank == 0) {
                    bar.set_status_text("Writing solution");
                    bar.update(time/t_end);
                }
                mesh.estimate_error<Polynomial>(NDG.nodes_, NDG.weights_);
                mesh.write_complete_data(time, NDG.nodes_, NDG.interpolation_matrices_, data_writer);
                break;
            }
        }

        if (mesh.adaptivity_interval_ > 0 && timestep % mesh.adaptivity_interval_ == 0) {
            if (global_rank == 0) {
                bar.set_status_text("Adapting");
                bar.update(time/t_end);
            }

            mesh.estimate_error<Polynomial>(NDG.nodes_, NDG.weights_);
            mesh.adapt(NDG.N_max_, NDG.nodes_, NDG.barycentric_weights_);
        }

        if (mesh.load_balancing_interval_ > 0 && global_size > 1 && timestep % mesh.load_balancing_interval_ == 0) {
            if (global_rank == 0) {
                bar.set_status_text("Load Balancing");
                bar.update(time/t_end);
            }

            mesh.load_balance(NDG.nodes_);
        }

        if (global_rank == 0) {
            std::stringstream ss;
            ss << "Iteration " << timestep;
            bar.set_status_text(ss.str());
            bar.update(time/t_end);
        }
    }

    bool did_write = false;
    for (auto const& e : std::as_const(output_times_)) {
        if ((time >= e) && (time < e + delta_t)) {
            did_write = true;
            break;
        }
    }

    if (!did_write) {
        mesh.estimate_error<Polynomial>(NDG.nodes_, NDG.weights_);
        if (global_rank == 0) {
            bar.set_status_text("Writing solution");
            bar.update(1.0);
        }
        mesh.write_complete_data(time, NDG.nodes_, NDG.interpolation_matrices_, data_writer);
    }
    if (global_rank == 0) {
        bar.set_status_text("Done");
        bar.update(1.0);
    }
    if (global_rank == 0) {
        std::cout << std::endl;
    }
}

template<typename Polynomial>
auto SEM::Device::Solvers::Solver2D_t::pre_condition(const SEM::Device::Entities::NDG_t<Polynomial> &NDG, SEM::Device::Meshes::Mesh2D_t& mesh, size_t n_adaptivity_steps) const -> void {
    if (mesh.adaptivity_interval_ == 0) {
        std::cerr << "Error, pre_condition should not be used with adaptivity disabled. Exiting." << std::endl;
        exit(77);
    }
    
    int global_rank;
    MPI_Comm_rank(MPI_COMM_WORLD, &global_rank);
    int global_size;
    MPI_Comm_size(MPI_COMM_WORLD, &global_size);
    deviceFloat time = 0.0;
    const deviceFloat t_end = output_times_.back();
    SEM::Helpers::ProgressBar_t bar;
    size_t timestep = 0;
    size_t n_adaptivity = 0;
    constexpr std::array<deviceFloat, 3> am {0, -5.0/9.0, -153.0/128.0};
    constexpr std::array<deviceFloat, 3> bm {0, 1.0/3.0, 0.75};
    constexpr std::array<deviceFloat, 3> gm {1.0/3.0, 15.0/16.0, 8.0/15.0};

    deviceFloat delta_t = get_delta_t(mesh);
    
    if (global_rank == 0) {
        bar.colour_ = termcolor::green;
        bar.set_status_text("Iteration 0");
        bar.update(0.0);
    }
    
    while (n_adaptivity < n_adaptivity_steps) {
        ++timestep;
        delta_t = get_delta_t(mesh);
        if (time + delta_t > t_end) {
            delta_t = t_end - time;
        }

        // Kinda algorithm 62
        deviceFloat t = time + bm[0] * delta_t;
        mesh.interpolate_to_boundaries(NDG.lagrange_interpolant_left_, NDG.lagrange_interpolant_right_);
        mesh.boundary_conditions(t, NDG.nodes_, NDG.weights_, NDG.barycentric_weights_);
        mesh.project_to_faces(NDG.nodes_, NDG.barycentric_weights_);
        SEM::Device::Solvers::calculate_wave_fluxes<<<mesh.faces_numBlocks_, mesh.faces_blockSize_, 0, mesh.stream_>>>(mesh.faces_.size(), mesh.faces_.data());
        mesh.project_to_elements(NDG.nodes_, NDG.weights_, NDG.barycentric_weights_);
        SEM::Device::Solvers::compute_dg_wave_derivative<<<mesh.elements_numBlocks_, mesh.elements_blockSize_, 0, mesh.stream_>>>(mesh.n_elements_, mesh.elements_.data(), mesh.faces_.data(), NDG.weights_.data(), NDG.derivative_matrices_hat_.data(), NDG.lagrange_interpolant_left_.data(), NDG.lagrange_interpolant_right_.data());
        SEM::Device::Solvers::rk3_first_step<<<mesh.elements_numBlocks_, mesh.elements_blockSize_, 0, mesh.stream_>>>(mesh.n_elements_, mesh.elements_.data(), delta_t, gm[0]);

        t = time + bm[1] * delta_t;
        mesh.interpolate_to_boundaries(NDG.lagrange_interpolant_left_, NDG.lagrange_interpolant_right_);
        mesh.boundary_conditions(t, NDG.nodes_, NDG.weights_, NDG.barycentric_weights_);
        mesh.project_to_faces(NDG.nodes_, NDG.barycentric_weights_);
        SEM::Device::Solvers::calculate_wave_fluxes<<<mesh.faces_numBlocks_, mesh.faces_blockSize_, 0, mesh.stream_>>>(mesh.faces_.size(), mesh.faces_.data());
        mesh.project_to_elements(NDG.nodes_, NDG.weights_, NDG.barycentric_weights_);
        SEM::Device::Solvers::compute_dg_wave_derivative<<<mesh.elements_numBlocks_, mesh.elements_blockSize_, 0, mesh.stream_>>>(mesh.n_elements_, mesh.elements_.data(), mesh.faces_.data(), NDG.weights_.data(), NDG.derivative_matrices_hat_.data(), NDG.lagrange_interpolant_left_.data(), NDG.lagrange_interpolant_right_.data());
        SEM::Device::Solvers::rk3_step<<<mesh.elements_numBlocks_, mesh.elements_blockSize_, 0, mesh.stream_>>>(mesh.n_elements_, mesh.elements_.data(), delta_t, am[1], gm[1]);

        t = time + bm[2] * delta_t;
        mesh.interpolate_to_boundaries(NDG.lagrange_interpolant_left_, NDG.lagrange_interpolant_right_);
        mesh.boundary_conditions(t, NDG.nodes_, NDG.weights_, NDG.barycentric_weights_);
        mesh.project_to_faces(NDG.nodes_, NDG.barycentric_weights_);
        SEM::Device::Solvers::calculate_wave_fluxes<<<mesh.faces_numBlocks_, mesh.faces_blockSize_, 0, mesh.stream_>>>(mesh.faces_.size(), mesh.faces_.data());
        mesh.project_to_elements(NDG.nodes_, NDG.weights_, NDG.barycentric_weights_);
        SEM::Device::Solvers::compute_dg_wave_derivative<<<mesh.elements_numBlocks_, mesh.elements_blockSize_, 0, mesh.stream_>>>(mesh.n_elements_, mesh.elements_.data(), mesh.faces_.data(), NDG.weights_.data(), NDG.derivative_matrices_hat_.data(), NDG.lagrange_interpolant_left_.data(), NDG.lagrange_interpolant_right_.data());
        SEM::Device::Solvers::rk3_step<<<mesh.elements_numBlocks_, mesh.elements_blockSize_, 0, mesh.stream_>>>(mesh.n_elements_, mesh.elements_.data(), delta_t, am[2], gm[2]);
        
        time += delta_t;

        if (timestep % mesh.adaptivity_interval_ == 0) {
            if (global_rank == 0) {
                bar.set_status_text("Adapting");
                bar.update(time/t_end);
            }

            mesh.estimate_error<Polynomial>(NDG.nodes_, NDG.weights_);
            mesh.adapt(NDG.N_max_, NDG.nodes_, NDG.barycentric_weights_);
            ++n_adaptivity;
        }

        if (mesh.load_balancing_interval_ > 0 && global_size > 1 && timestep % mesh.load_balancing_interval_ == 0) {
            if (global_rank == 0) {
                bar.set_status_text("Load Balancing");
                bar.update(time/t_end);
            }

            mesh.load_balance(NDG.nodes_);
        }

        if (global_rank == 0) {
            std::stringstream ss;
            ss << "Iteration " << timestep;
            bar.set_status_text(ss.str());
            bar.update(time/t_end);
        }
    }

    if (global_rank == 0) {
        bar.set_status_text("Done");
        bar.update(1.0);
    }
    if (global_rank == 0) {
        std::cout << std::endl;
    }
}

// From https://developer.download.nvidia.com/assets/cuda/files/reduction.pdf
template <unsigned int blockSize>
__device__ 
auto SEM::Device::Solvers::warp_reduce_delta_t_2D(volatile deviceFloat *sdata, unsigned int tid) -> void {
    if (blockSize >= 64) sdata[tid] = std::min(sdata[tid], sdata[tid + 32]);
    if (blockSize >= 32) sdata[tid] = std::min(sdata[tid], sdata[tid + 16]);
    if (blockSize >= 16) sdata[tid] = std::min(sdata[tid], sdata[tid + 8]);
    if (blockSize >= 8) sdata[tid] = std::min(sdata[tid], sdata[tid + 4]);
    if (blockSize >= 4) sdata[tid] = std::min(sdata[tid], sdata[tid + 2]);
    if (blockSize >= 2) sdata[tid] = std::min(sdata[tid], sdata[tid + 1]);
}

// From https://developer.download.nvidia.com/assets/cuda/files/reduction.pdf
template <unsigned int blockSize>
__global__ 
auto SEM::Device::Solvers::reduce_wave_delta_t(deviceFloat CFL, size_t N_elements, const SEM::Device::Entities::Element2D_t* elements, deviceFloat *g_odata) -> void {
    __shared__ deviceFloat sdata[(blockSize >= 64) ? blockSize : blockSize + blockSize/2]; // Because within a warp there is no branching and this is read up until blockSize + blockSize/2
    unsigned int tid = threadIdx.x;
    size_t i = blockIdx.x*(blockSize*2) + tid;
    unsigned int gridSize = blockSize*2*gridDim.x;
    sdata[tid] = std::numeric_limits<deviceFloat>::infinity();

    while (i < N_elements) { 
        deviceFloat delta_t_wave = CFL * elements[i].delta_xy_min_/(elements[i].N_ * elements[i].N_);

        if (i+blockSize < N_elements) {
            delta_t_wave = std::min(delta_t_wave, CFL * elements[i+blockSize].delta_xy_min_/(elements[i+blockSize].N_ * elements[i+blockSize].N_));
        }

        sdata[tid] = std::min(sdata[tid], delta_t_wave); 
        i += gridSize; 
    }
    __syncthreads();

    if (blockSize >= 8192) { if (tid < 4096) { sdata[tid] = std::min(sdata[tid], sdata[tid + 4096]); } __syncthreads(); }
    if (blockSize >= 4096) { if (tid < 2048) { sdata[tid] = std::min(sdata[tid], sdata[tid + 2048]); } __syncthreads(); }
    if (blockSize >= 2048) { if (tid < 1024) { sdata[tid] = std::min(sdata[tid], sdata[tid + 1024]); } __syncthreads(); }
    if (blockSize >= 1024) { if (tid < 512) { sdata[tid] = std::min(sdata[tid], sdata[tid + 512]); } __syncthreads(); }
    if (blockSize >= 512) { if (tid < 256) { sdata[tid] = std::min(sdata[tid], sdata[tid + 256]); } __syncthreads(); }
    if (blockSize >= 256) { if (tid < 128) { sdata[tid] = std::min(sdata[tid], sdata[tid + 128]); } __syncthreads(); }
    if (blockSize >= 128) { if (tid < 64) { sdata[tid] = std::min(sdata[tid], sdata[tid + 64]); } __syncthreads(); }

    if (tid < 32) warp_reduce_delta_t_2D<blockSize>(sdata, tid);
    if (tid == 0) g_odata[blockIdx.x] = sdata[0];
}